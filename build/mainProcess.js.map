{"version":3,"sources":["../src/mainProcess.js"],"names":["PromiseIpcMain","opts","maxTimeoutMs","route","webContents","dataArgs","Promise","resolve","reject","replyChannel","timeout","didTimeOut","ipcMain","once","event","status","returnData","clearTimeout","Error","send","setTimeout","listener","on","then","results","sender","catch","e","message","PromiseIpc","mainExport","module","exports"],"mappings":";;;;;;;qjBAAoC;;;AAApC;;AACA;;;;AACA;;;;;;;;IAEaA,c,WAAAA,c;AACX,0BAAYC,IAAZ,EAAkB;AAAA;;AAChB,QAAIA,IAAJ,EAAU;AACR,WAAKC,YAAL,GAAoBD,KAAKC,YAAzB;AACD;AACF;;AAED;;;;;yBACKC,K,EAAOC,W,EAA0B;AAAA,wCAAVC,QAAU;AAAVA,gBAAU;AAAA;;AAAA;;AACpC,aAAO,IAAIC,kBAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMC,eAAkBN,KAAlB,SAA2B,kBAAjC;AACA,YAAIO,gBAAJ;AACA,YAAIC,aAAa,KAAjB;;AAEA;AACAC,0BAAQC,IAAR,CAAaJ,YAAb,EAA2B,UAACK,KAAD,EAAQC,MAAR,EAAgBC,UAAhB,EAA+B;AACxDC,uBAAaP,OAAb;AACA,cAAIC,UAAJ,EAAgB;AACd,mBAAO,IAAP;AACD;AACD,kBAAQI,MAAR;AACE,iBAAK,SAAL;AACE,qBAAOR,QAAQS,UAAR,CAAP;AACF,iBAAK,SAAL;AACE,qBAAOR,OAAO,IAAIU,KAAJ,CAAUF,UAAV,CAAP,CAAP;AACF;AACE,qBAAOR,OAAO,IAAIU,KAAJ,kCAAyCH,MAAzC,aAAuDZ,KAAvD,CAAP,CAAP;AANJ;AAQD,SAbD;AAcAC,oBAAYe,IAAZ,qBAAiBhB,KAAjB,EAAwBM,YAAxB,SAAyCJ,QAAzC;;AAEA,YAAI,MAAKH,YAAT,EAAuB;AACrBQ,oBAAUU,WAAW,YAAM;AACzBT,yBAAa,IAAb;AACAH,mBAAO,IAAIU,KAAJ,CAAaf,KAAb,iBAAP;AACD,WAHS,EAGP,MAAKD,YAHE,CAAV;AAID;AACF,OA5BM,CAAP;AA6BD;;AAED;AACA;;;;uBACGC,K,EAAOkB,Q,EAAU;AAClBT,wBAAQU,EAAR,CAAWnB,KAAX,EAAkB,UAACW,KAAD,EAAQL,YAAR,EAAsC;AAAA,2CAAbJ,QAAa;AAAbA,kBAAa;AAAA;;AACtD;AACA;AACAC,2BAAQC,OAAR,GAAkBgB,IAAlB,CAAuB;AAAA,iBAAMF,0BAAYhB,QAAZ,CAAN;AAAA,SAAvB,EACGkB,IADH,CACQ,UAACC,OAAD,EAAa;AACjBV,gBAAMW,MAAN,CAAaN,IAAb,CAAkBV,YAAlB,EAAgC,SAAhC,EAA2Ce,OAA3C;AACD,SAHH,EAIGE,KAJH,CAIS,UAACC,CAAD,EAAO;AACZ,cAAMC,UAAUD,KAAKA,EAAEC,OAAP,GAAiBD,EAAEC,OAAnB,GAA6BD,CAA7C;AACAb,gBAAMW,MAAN,CAAaN,IAAb,CAAkBV,YAAlB,EAAgC,SAAhC,EAA2CmB,OAA3C;AACD,SAPH;AAQD,OAXD;AAYD;;;;;;AAGI,IAAMC,kCAAa7B,cAAnB;;AAEP,IAAM8B,aAAa,IAAI9B,cAAJ,EAAnB;AACA8B,WAAWD,UAAX,GAAwB7B,cAAxB;AACA8B,WAAW9B,cAAX,GAA4BA,cAA5B;;kBAEe8B,U;;AACfC,OAAOC,OAAP,GAAiBF,UAAjB","file":"mainProcess.js","sourcesContent":["import { ipcMain } from 'electron'; // eslint-disable-line\nimport uuid from 'uuid/v4';\nimport Promise from 'bluebird';\n\nexport class PromiseIpcMain {\n  constructor(opts) {\n    if (opts) {\n      this.maxTimeoutMs = opts.maxTimeoutMs;\n    }\n  }\n\n  // Send requires webContents -- see http://electron.atom.io/docs/api/ipc-main/\n  send(route, webContents, ...dataArgs) {\n    return new Promise((resolve, reject) => {\n      const replyChannel = `${route}#${uuid()}`;\n      let timeout;\n      let didTimeOut = false;\n\n      // ipcRenderer will send a message back to replyChannel when it finishes calculating\n      ipcMain.once(replyChannel, (event, status, returnData) => {\n        clearTimeout(timeout);\n        if (didTimeOut) {\n          return null;\n        }\n        switch (status) {\n          case 'success':\n            return resolve(returnData);\n          case 'failure':\n            return reject(new Error(returnData));\n          default:\n            return reject(new Error(`Unexpected IPC call status \"${status}\" in ${route}`));\n        }\n      });\n      webContents.send(route, replyChannel, ...dataArgs);\n\n      if (this.maxTimeoutMs) {\n        timeout = setTimeout(() => {\n          didTimeOut = true;\n          reject(new Error(`${route} timed out.`));\n        }, this.maxTimeoutMs);\n      }\n    });\n  }\n\n  // If I ever implement `off`, then this method will actually use `this`.\n  // eslint-disable-next-line class-methods-use-this\n  on(route, listener) {\n    ipcMain.on(route, (event, replyChannel, ...dataArgs) => {\n      // Chaining off of Promise.resolve() means that listener can return a promise, or return\n      // synchronously -- it can even throw. The end result will still be handled promise-like.\n      Promise.resolve().then(() => listener(...dataArgs))\n        .then((results) => {\n          event.sender.send(replyChannel, 'success', results);\n        })\n        .catch((e) => {\n          const message = e && e.message ? e.message : e;\n          event.sender.send(replyChannel, 'failure', message);\n        });\n    });\n  }\n}\n\nexport const PromiseIpc = PromiseIpcMain;\n\nconst mainExport = new PromiseIpcMain();\nmainExport.PromiseIpc = PromiseIpcMain;\nmainExport.PromiseIpcMain = PromiseIpcMain;\n\nexport default mainExport;\nmodule.exports = mainExport;\n"]}