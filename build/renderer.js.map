{"version":3,"sources":["../src/renderer.js"],"names":["PromiseIpcRenderer","opts","maxTimeoutMs","route","dataArgs","Promise","resolve","reject","replyChannel","timeout","didTimeOut","ipcRenderer","once","event","status","returnData","clearTimeout","Error","send","setTimeout","listener","on","then","results","catch","e","message","PromiseIpc","mainExport","module","exports"],"mappings":";;;;;;;qjBAAwC;;;AAAxC;;AACA;;;;AACA;;;;;;;;IAEaA,kB,WAAAA,kB;AACX,8BAAYC,IAAZ,EAAkB;AAAA;;AAChB,QAAIA,IAAJ,EAAU;AACR,WAAKC,YAAL,GAAoBD,KAAKC,YAAzB;AACD;AACF;;;;yBAEIC,K,EAAoB;AAAA;;AAAA,wCAAVC,QAAU;AAAVA,gBAAU;AAAA;;AACvB,aAAO,IAAIC,kBAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMC,eAAkBL,KAAlB,SAA2B,kBAAjC;AACA,YAAIM,gBAAJ;AACA,YAAIC,aAAa,KAAjB;;AAEA;AACAC,8BAAYC,IAAZ,CAAiBJ,YAAjB,EAA+B,UAACK,KAAD,EAAQC,MAAR,EAAgBC,UAAhB,EAA+B;AAC5DC,uBAAaP,OAAb;AACA,cAAIC,UAAJ,EAAgB;AACd,mBAAO,IAAP;AACD;AACD,kBAAQI,MAAR;AACE,iBAAK,SAAL;AACE,qBAAOR,QAAQS,UAAR,CAAP;AACF,iBAAK,SAAL;AACE,qBAAOR,OAAO,IAAIU,KAAJ,CAAUF,UAAV,CAAP,CAAP;AACF;AACE,qBAAOR,OAAO,IAAIU,KAAJ,kCAAyCH,MAAzC,aAAuDX,KAAvD,CAAP,CAAP;AANJ;AAQD,SAbD;AAcAQ,8BAAYO,IAAZ,+BAAiBf,KAAjB,EAAwBK,YAAxB,SAAyCJ,QAAzC;;AAEA,YAAI,MAAKF,YAAT,EAAuB;AACrBO,oBAAUU,WAAW,YAAM;AACzBT,yBAAa,IAAb;AACAH,mBAAO,IAAIU,KAAJ,CAAad,KAAb,iBAAP;AACD,WAHS,EAGP,MAAKD,YAHE,CAAV;AAID;AACF,OA5BM,CAAP;AA6BD;;AAED;AACA;;;;uBACGC,K,EAAOiB,Q,EAAU;AAClBT,4BAAYU,EAAZ,CAAelB,KAAf,EAAsB,UAACU,KAAD,EAAQL,YAAR,EAAsC;AAAA,2CAAbJ,QAAa;AAAbA,kBAAa;AAAA;;AAC1D;AACA;AACAC,2BAAQC,OAAR,GAAkBgB,IAAlB,CAAuB;AAAA,iBAAMF,0BAAYhB,QAAZ,CAAN;AAAA,SAAvB,EACGkB,IADH,CACQ,UAACC,OAAD,EAAa;AACjBZ,gCAAYO,IAAZ,CAAiBV,YAAjB,EAA+B,SAA/B,EAA0Ce,OAA1C;AACD,SAHH,EAIGC,KAJH,CAIS,UAACC,CAAD,EAAO;AACZ,cAAMC,UAAUD,KAAKA,EAAEC,OAAP,GAAiBD,EAAEC,OAAnB,GAA6BD,CAA7C;AACAd,gCAAYO,IAAZ,CAAiBV,YAAjB,EAA+B,SAA/B,EAA0CkB,OAA1C;AACD,SAPH;AAQD,OAXD;AAYD;;;;;;AAGI,IAAMC,kCAAa3B,kBAAnB;;AAEP,IAAM4B,aAAa,IAAI5B,kBAAJ,EAAnB;AACA4B,WAAWD,UAAX,GAAwB3B,kBAAxB;AACA4B,WAAW5B,kBAAX,GAAgCA,kBAAhC;;kBAEe4B,U;;AACfC,OAAOC,OAAP,GAAiBF,UAAjB","file":"renderer.js","sourcesContent":["import { ipcRenderer } from 'electron'; // eslint-disable-line\nimport uuid from 'uuid/v4';\nimport Promise from 'bluebird';\n\nexport class PromiseIpcRenderer {\n  constructor(opts) {\n    if (opts) {\n      this.maxTimeoutMs = opts.maxTimeoutMs;\n    }\n  }\n\n  send(route, ...dataArgs) {\n    return new Promise((resolve, reject) => {\n      const replyChannel = `${route}#${uuid()}`;\n      let timeout;\n      let didTimeOut = false;\n\n      // ipcMain will send a message back to replyChannel when it finishes calculating\n      ipcRenderer.once(replyChannel, (event, status, returnData) => {\n        clearTimeout(timeout);\n        if (didTimeOut) {\n          return null;\n        }\n        switch (status) {\n          case 'success':\n            return resolve(returnData);\n          case 'failure':\n            return reject(new Error(returnData));\n          default:\n            return reject(new Error(`Unexpected IPC call status \"${status}\" in ${route}`));\n        }\n      });\n      ipcRenderer.send(route, replyChannel, ...dataArgs);\n\n      if (this.maxTimeoutMs) {\n        timeout = setTimeout(() => {\n          didTimeOut = true;\n          reject(new Error(`${route} timed out.`));\n        }, this.maxTimeoutMs);\n      }\n    });\n  }\n\n  // If I ever implement `off`, then this method will actually use `this`.\n  // eslint-disable-next-line class-methods-use-this\n  on(route, listener) {\n    ipcRenderer.on(route, (event, replyChannel, ...dataArgs) => {\n      // Chaining off of Promise.resolve() means that listener can return a promise, or return\n      // synchronously -- it can even throw. The end result will still be handled promise-like.\n      Promise.resolve().then(() => listener(...dataArgs))\n        .then((results) => {\n          ipcRenderer.send(replyChannel, 'success', results);\n        })\n        .catch((e) => {\n          const message = e && e.message ? e.message : e;\n          ipcRenderer.send(replyChannel, 'failure', message);\n        });\n    });\n  }\n}\n\nexport const PromiseIpc = PromiseIpcRenderer;\n\nconst mainExport = new PromiseIpcRenderer();\nmainExport.PromiseIpc = PromiseIpcRenderer;\nmainExport.PromiseIpcRenderer = PromiseIpcRenderer;\n\nexport default mainExport;\nmodule.exports = mainExport;\n"]}